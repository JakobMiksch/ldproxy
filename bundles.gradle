
subprojects {
    apply plugin: 'java'
    apply plugin: 'osgi-ipojo'
    //apply plugin: 'biz.aQute.bnd.builder'
    apply plugin: 'license'

    sourceCompatibility = 1.8

    version = '1.2.0'
    //version += '-SNAPSHOT'
    group = 'de.interactive_instruments'

    license {
        header rootProject.file('gradle/license-header')
        strictCheck true
        excludes([
                "**/*.mustache",
                "**/*.png",
                "**/*.ico",
                "**/*.xcf",
                "**/*.js",
                "**/*.css",
                "**/template.html",
                "**/*.json"])
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.name = "interactive instruments GmbH"

        //ext.name = "European Union, interactive instruments GmbH"
        //includes([
        excludes([
            "**/LdProxyAdminServiceResource.java",
            "**/CatalogResource.java",
            "**/LdProxyServiceResource.java",
            "**/AbstractFeatureWriter.java",
            "**/GeoJsonFeatureWriter.java",
            "**/GeoJsonOnTheFlyMapping.java",
            "**/GetCapabilities2Dataset.java",
            "**/MicrodataFeatureWriter.java",
            "**/JsonLdOnTheFlyMapping.java",
            "**/JsonLdOutputWriter.java",
            "**/IndexValueWriter.java",
            "**/LdProxyModule.java",
            "**/LdProxyService.java",
            "**/LdProxyServiceSerializer.java",
            "**/LdProxyServiceStore.java",
            "**/LdProxyServiceStoreDefault.java"
        ])
    }

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://dl.bintray.com/iide/maven"
        }
        mavenLocal()
    }

    configurations {
        embedded
        provided
        compile.extendsFrom embedded
        compile.extendsFrom provided
    }

    dependencies {
        compileOnly         "org.immutables:value:2.6.3:annotations"
        annotationProcessor "org.immutables:value:2.6.3"

        // TODO: get from root project, at least the versions
        provided group: 'de.interactive_instruments', name: 'xtraplatform-bundles-runtime', version: '1.1.5'
        // TODO: shouldn't we only be allowed to use api bundles here?
        provided group: 'de.interactive_instruments', name: 'xtraplatform-bundles-core', version: '1.2.3'
        provided group: 'de.interactive_instruments', name: 'xtraplatform-sdi-tools', version: '2.0.32'

        // TODO: this is in bundles-runtime, but with transitive=false
        // TODO: we need the transitive dependencies in provided
        provided group: 'de.interactive_instruments', name: 'xtraplatform-dropwizard', version: '1.1.5'

        testCompile group: 'org.testng', name: 'testng', version: '6.8.5'
    }

    compileJava {
        String relativePath = "build/generated/src/main/java"
        sourceSets.main.java { srcDir relativePath }
        File generatedSourceDir = project.file("build/generated/src/main/java")
        project.mkdir(generatedSourceDir)
        options.annotationProcessorGeneratedSourcesDirectory = generatedSourceDir
        outputs.dir(generatedSourceDir)

        doFirst {
            // force a clean of generatedSourceDir to prevent java.lang.IllegalStateException: endPosTable already set. This shouldn't be need if using Gradle 4.8+ or Java 9+.
            project.delete(generatedSourceDir)
            project.mkdir(generatedSourceDir)
        }
    }

    test {
        useTestNG()
        options {
            includeGroups 'default'
            /* if you want to run tests for debugging purposes that are not part
            of the continuous integration, put them in the "debug"-group and
            uncomment the following line just in your local working copy
             */
            //includeGroups 'debug'
            //includeGroups 'performance'
            //includeGroups 'integration'
        }
        testLogging.showStandardStreams = true
        reports.html.enabled = true

    }

    jar {
        manifest {
            attributes("Implementation-Title": project.name, "Implementation-Version": project.version)
            
            instruction '-removeheaders', 'Bnd-LastModified'
            instructionReplace "Bundle-SymbolicName",project.name//.replaceAll('-', '.')

            instruction 'Import-Package', 'com.fasterxml.jackson.module.afterburner.ser'
            instruction 'Import-Package', '*'
            instruction 'Private-Package', 'de.ii.empty'
            /*
            attributes('-removeheaders': 'Bnd-LastModified',
                "Bundle-SymbolicName": project.name.replaceAll('-', '.'),
                'Import-Package': 'com.fasterxml.jackson.module.afterburner.ser, *',
                //'Import-Package': '*',
                'Private-Package': 'de.ii.empty;-split-package:=merge-first, de.ii.' + project.name.replaceAll('-', '.') + '.internal.*',
                'Export-Package': '!de.ii.' + project.name.replaceAll('-', '.') + '.internal.*, de.ii.' + project.name.replaceAll('-', '.') + '*'
                )
            */
        }
    }
    afterEvaluate {
        task hotDeploy(type: Copy) {
            dependsOn jar
            from jar
            into new File(rootProject.tasks.installDist.destinationDir, 'bundles/platform')
        }
    }
}
